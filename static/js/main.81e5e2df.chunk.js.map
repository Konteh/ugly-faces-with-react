{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","App","handleChange","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","type","placeholder","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA2BH,EAAMI,SAASC,GAA1C,4BACvB,mCAAML,EAAMI,SAASE,KAArB,OACR,4BAAIN,EAAMI,SAASG,YCFNC,G,MAAW,SAAAR,GAAK,OAE5B,qBAAKC,UAAU,YAAf,SACMD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OACxB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,WCmCfK,E,kDArCb,aAAc,IAAD,8BACX,gBAgBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAGf,EAAKH,aAAe,EAAKA,aAAaO,KAAlB,gBART,E,qDAWb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAAUmB,S,oBAM1C,WACE,MAAiCC,KAAKP,MAA/Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXW,EAAmBrB,EAASsB,QAAO,SAAAtB,GAAQ,OAC/CA,EAASE,KAAKqB,cAAcC,SAASd,EAAYa,kBAEnD,OACE,sBAAK1B,UAAU,MAAf,UACE,wCACA,uBAAO4B,KAAK,SAASC,YAAY,kBACjCC,SAAUP,KAAKb,eACf,cAAC,EAAD,CAAUP,SAAUqB,W,GA/BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.81e5e2df.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt=\"monsters\" src= {`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\r\n        <h2> {props.monsters.name} </h2>\r\n<p>{props.monsters.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props =>( \r\n  \r\n <div className='card-list'>\r\n      {props.monsters.map(monsters =>(\r\n          <Card key={monsters.id} monsters={monsters}/>\r\n        ))}\r\n </div>\r\n)","\nimport './App.css';\nimport { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\n\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e)=>{\n    this.setState({searchField: e.target.value})\n  }\n  render() {\n    const {monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monsters =>\n      monsters.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1>facess</h1>\n        <input type='search' placeholder='search monsters'\n        onChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}>\n       \n        </CardList>\n      </div>\n    );  \n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}